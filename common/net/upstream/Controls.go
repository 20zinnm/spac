// automatically generated by the FlatBuffers compiler, do not modify

package upstream

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Controls struct {
	_tab flatbuffers.Table
}

func GetRootAsControls(buf []byte, offset flatbuffers.UOffsetT) *Controls {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Controls{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Controls) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Controls) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Controls) Left() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Controls) MutateLeft(n byte) bool {
	return rcv._tab.MutateByteSlot(4, n)
}

func (rcv *Controls) Right() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Controls) MutateRight(n byte) bool {
	return rcv._tab.MutateByteSlot(6, n)
}

func (rcv *Controls) Thrusting() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Controls) MutateThrusting(n byte) bool {
	return rcv._tab.MutateByteSlot(8, n)
}

func (rcv *Controls) Shooting() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Controls) MutateShooting(n byte) bool {
	return rcv._tab.MutateByteSlot(10, n)
}

func ControlsStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func ControlsAddLeft(builder *flatbuffers.Builder, left byte) {
	builder.PrependByteSlot(0, left, 0)
}
func ControlsAddRight(builder *flatbuffers.Builder, right byte) {
	builder.PrependByteSlot(1, right, 0)
}
func ControlsAddThrusting(builder *flatbuffers.Builder, thrusting byte) {
	builder.PrependByteSlot(2, thrusting, 0)
}
func ControlsAddShooting(builder *flatbuffers.Builder, shooting byte) {
	builder.PrependByteSlot(3, shooting, 0)
}
func ControlsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
